// Generated by CoffeeScript 1.6.3
(function() {
  var SchemaBuilder, SchemaDefinition, SchemaMigration, yaml,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  yaml = require('js-yaml');

  SchemaDefinition = require('./model/SchemaDefinition');

  SchemaMigration = require('./model/SchemaMigration');

  SchemaBuilder = (function(_super) {
    __extends(SchemaBuilder, _super);

    function SchemaBuilder(options) {
      this.options = options != null ? options : {};
      SchemaBuilder.__super__.constructor.apply(this, arguments);
      this.generators = {};
    }

    SchemaBuilder.prototype.getCurrentSchemaVersion = function(engine, url, callback) {
      return this._schemaGenerator(engine).getCurrentVersion(url, callback);
    };

    SchemaBuilder.prototype.generateSchemaFromYaml = function(engine, yamlSource) {
      return this.generateSchema(engine, yaml.safeLoad(yamlSource));
    };

    SchemaBuilder.prototype.generateSchema = function(engine, definition) {
      return this._schemaGenerator(engine).generateSchema(new SchemaDefinition(definition));
    };

    SchemaBuilder.prototype.generateSchemaMigrationFromYamls = function(engine, yamlSources, versionFrom, versionTo) {
      var key, sources, value;
      sources = {};
      for (key in yamlSources) {
        value = yamlSources[key];
        sources[key] = yaml.safeLoad(value);
      }
      return this.generateSchemaMigration(engine, sources, versionFrom, versionTo);
    };

    SchemaBuilder.prototype.generateSchemaMigration = function(engine, definitions, versionFrom, versionTo) {
      var definition, defs, key;
      defs = {};
      for (key in definitions) {
        definition = definitions[key];
        if (key.indexOf('->') !== -1) {
          defs[key] = new SchemaMigration(definition);
        } else {
          defs[key] = new SchemaDefinition(definition);
        }
      }
      return this._schemaGenerator(engine).generateSchemaMigration(defs, versionFrom, versionTo);
    };

    SchemaBuilder.prototype.latestVersion = function(definitions) {
      var latestVersion;
      latestVersion = Object.keys(definitions).filter(function(item) {
        return item.indexOf('->') === -1;
      }).sort().reverse()[0];
      return latestVersion;
    };

    SchemaBuilder.prototype._schemaGenerator = function(engine) {
      var e, generator;
      generator = this.generators[engine];
      if (!generator) {
        try {
          generator = new (require('./generators/' + engine.toLowerCase()))();
        } catch (_error) {
          e = _error;
          throw new Error('engine ' + engine + ' not supported');
        }
        this.generators[engine] = generator;
      }
      return generator;
    };

    return SchemaBuilder;

  })(Object);

  module.exports = SchemaBuilder;

}).call(this);
